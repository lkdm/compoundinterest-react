{"version":3,"sources":["components/calculator/TextInput.tsx","components/calculator/DropDownInput.tsx","components/calculator/Form.tsx","services/InputCleaners.tsx","services/CompoundInterest.tsx","services/FormatMoney.tsx","components/result/ResultChart.tsx","components/result/ResultsText.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TextInput","_ref","label","name","prepend","append","onSubmit","value","_jsxs","children","_jsx","className","type","onChange","DropDownInput","options","handleSubmit","map","option","Form","strategy","depositFrequency","compoundFrequency","slice","id","initialDeposit","toFixed","regularDeposit","numberOfYears","annualInterestRate","cleanNumber","rawInput","min","max","cleanedInput","replace","result","Number","sumDepositsForPeriod","amount","frequencyPerYear","frequency","convertFrequencyStringToNumber","calculateCompoundInterest","rate","ratePerCompound","results","P","cumulativeDeposits","cumulativeInterest","year","period","push","yearNumber","cumulativeRegularDeposits","cumulativeTotal","formatMoney","Intl","NumberFormat","notation","compactDisplay","format","CustomTooltip","active","payload","length","inital","deposits","interest","total","_Fragment","ResultChart","_ref2","data","undefined","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","tickFormatter","Tooltip","content","Legend","verticalAlign","Bar","stackId","fill","ResultsText","initial","defaultStrategy","App","setStrategy","useState","setResult","useEffect","event","target","cleanPercent","cleanYears","href","role","Boolean","window","location","hostname","match","ReactDOM","render","React","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2457f4e4.chunk.js","sourcesContent":["import { ChangeEventHandler } from \"react\"\n\n\ninterface Props {\n  label: string,\n  name: string,\n  prepend?: string,\n  append?: string,\n  onSubmit: ChangeEventHandler<HTMLInputElement>,\n  value: string | number\n}\n\nconst TextInput: React.FC<Props> = ({label, name, prepend, append, onSubmit, value}) => {\n  return (\n    <div>\n      <label>\n        {label}\n      </label>\n      <div className=\"input-group mb-3\">\n        {prepend && <span className=\"input-group-text\">{prepend}</span>}\n        <input\n          type=\"number\"\n          name={name}\n          className=\"form-control\"\n          aria-label=\"{label}\"\n          onChange={onSubmit}\n          value={value}\n        />\n        {append && <span className=\"input-group-text\">{append}</span>}\n      </div>\n    </div>\n  )\n}\n\nexport default TextInput\n","import React from 'react'\n\ninterface Props {\n  label: string,\n  name: string,\n  options: Array<String>,\n  handleSubmit: React.ChangeEventHandler<HTMLSelectElement>\n}\n\nconst DropDownInput: React.FC<Props> = ({label, name, options, handleSubmit}) => {\n  return (\n    <div>\n      <label>\n        {label}\n      </label>\n      <select className=\"form-select\" name={name} aria-label=\"{label}\" onChange={handleSubmit}>\n        {options.map((option) => {return (\n          <option>{option}</option>\n        )})}\n      </select>\n    </div>\n  )\n}\n\nexport default DropDownInput\n","import TextInput from './TextInput'\nimport DropDownInput from './DropDownInput'\nimport {Strategy, Frequency} from '../../types/types'\nimport { ChangeEventHandler } from 'react'\n\ninterface Props {\n  handleSubmit: ChangeEventHandler<HTMLInputElement | HTMLSelectElement>,\n  strategy: Strategy\n}\n\nconst Form: React.FC<Props> = ({handleSubmit, strategy}) => {\n  const frequency: Array<Frequency> = [\"Annually\", \"Monthly\", \"Fortnightly\", \"Weekly\", \"Daily\"]\n  const depositFrequency = frequency\n  const compoundFrequency = depositFrequency.slice(0, 2) // [\"Annually\", \"Monthly\"]\n\n  return (\n    <form id=\"compoundInterestForm\">\n      <div className=\"row\">\n        <div className=\"col-md\">\n          <TextInput name=\"initialDeposit\" label=\"Initial deposit\" prepend=\"$\" onSubmit={handleSubmit} value={(strategy.initialDeposit/100).toFixed(2)} />\n        </div>\n        <div className=\"col-md\">\n          <TextInput name=\"regularDeposit\" label=\"Regular deposit\" prepend=\"$\" onSubmit={handleSubmit} value={(strategy.regularDeposit/100).toFixed(2)} />\n        </div>\n        <div className=\"col-md\">\n          <DropDownInput name=\"depositFrequency\" label=\"Deposit frequency\" options={depositFrequency} handleSubmit={handleSubmit} />\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md\">\n          <DropDownInput name=\"compoundFrequency\" label=\"Compound frequency\" options={compoundFrequency} handleSubmit={handleSubmit} />\n        </div>\n        <div className=\"col-md\">\n          <TextInput name=\"numberOfYears\" label=\"Number of years\" onSubmit={handleSubmit} value={strategy.numberOfYears} append=\"years\" />\n        </div>\n        <div className=\"col-md\">\n          <TextInput name=\"annualInterestRate\" label=\"Annual interest rate\" append=\"%\" onSubmit={handleSubmit} value={(strategy.annualInterestRate/100).toFixed(2)} />\n        </div>\n      </div>\n      \n    </form>\n  )\n}\n\nexport default Form\n","/*\n  InputCleaners\n    Accepts raw input strings from the user \n      - Disallows alpha & special characters\n      - Casts raw string into a number\n    Specifies upper and lower bounds for different formats\n\n*/\n\nexport const cleanNumber = (rawInput: string, min?: number, max?: number): number => {\n  /* Accept raw string and cast as number, with optional max and min bounds */\n\n  // Remove letters and special character (excepting decimal)\n  const cleanedInput: string = rawInput.replace(/[^0-9]/g, \"\")\n\n  // Cast result to number\n  let result: number = Number(cleanedInput)\n\n  if (min && result < min)\n    result = min // Min\n  if (max && result > max)\n    result = max // Max\n\n  return result\n}\n\n// Money min of 0 (stored in .01s/cents)\nexport const cleanMoney = (rawInput: string): number => cleanNumber(rawInput, 0)\n// Percent 0-100% (stored in .01s)\nexport const cleanPercent = (rawInput: string): number => cleanNumber(rawInput, 0, 10000)\n// Years 0-30\nexport const cleanYears = (rawInput: string): number => cleanNumber(rawInput, 0, 30)","import { Frequency, Strategy, Result } from '../types/types'\n/*\nCalculate Compound Interest\n\n*/\n\n// Calculate interest rate for each compound, given annual rate and compounds/year\nconst ratePerCompound = (annualInterestRate: number, compoundFrequency: Frequency): number => annualInterestRate/frequencyPerYear(compoundFrequency)\n\nconst sumDepositsForPeriod = (amount: number, depositFrequency: Frequency, compoundFrequency: Frequency): number => {\n  /*\n   * Calculate the sum of deposits made per compound period\n   * Given: Deposit amount, deposits per year, and compounds per year\n   */\n  if (compoundFrequency === \"Monthly\")\n    return amount * frequencyPerYear(depositFrequency) / 12 // <-----\n  // Yearly\n  return amount * frequencyPerYear(depositFrequency)\n}\n\nconst frequencyPerYear = (frequency: Frequency): number => {\n  /*\n   * Convert a frequency string into a _number_ of times per year\n   */\n  enum convertFrequencyStringToNumber {\n    Annually = 1,\n    Monthly = 12,\n    Fortnightly = 26.0714,\n    Weekly = 52.1429,\n    Daily = 365,\n  }\n  return convertFrequencyStringToNumber[frequency]\n}\n\n\n\nexport const calculateCompoundInterest = (strategy: Strategy) => {\n\n  // Guard: Check number of years is more than 0\n  if (strategy.numberOfYears < 1) return\n\n  // Definitions\n  const initialDeposit = strategy.initialDeposit/100\n  const regularDeposit = strategy.regularDeposit/100\n  const depositFrequency = strategy.depositFrequency\n  const compoundFrequency = strategy.compoundFrequency // \"Annually\", \"Monthly\", ...\n  const annualInterestRate: number = strategy.annualInterestRate // Annual interest rate\n\n  // Determine the interest rate per compound\n  const rate = ratePerCompound(annualInterestRate, compoundFrequency)/10000\n  \n  /*\n   * Perform calculations per compound frequency\n   */\n  let results: Result = []\n\n  let P: number = initialDeposit\n  let cumulativeDeposits: number = 0\n  let cumulativeInterest: number = 0\n\n\n  for (let year: number = 0; year < strategy.numberOfYears; year++) {\n    // For each year\n\n    for (let period:number = 0; period < frequencyPerYear(compoundFrequency); period++) {\n      // For each compound period in the year (1 or 12)\n\n      // Work out deposits this period\n      const depositThisPeriod = sumDepositsForPeriod(regularDeposit, depositFrequency, compoundFrequency)\n      \n      // Calculate new principal\n      P = initialDeposit + cumulativeDeposits + cumulativeInterest\n\n      // Calculate interest based on the rate\n      const i: number = P * (1 + rate) - P\n\n      // Save cumulative deposits and interest this period\n      cumulativeDeposits += depositThisPeriod\n      cumulativeInterest += i\n    }\n\n    results.push({\n      yearNumber: year+1,\n      initialDeposit: initialDeposit,\n      cumulativeRegularDeposits: cumulativeDeposits, // Principal less initial deposit\n      cumulativeInterest: cumulativeInterest,\n      cumulativeTotal: P\n    })\n\n  }\n\n  return results\n}","// Built-in Javascript money formatter\nconst formatMoney = (value: number) => new Intl.NumberFormat('en', { notation: \"compact\", compactDisplay: \"short\" }).format(Number(value))\nexport default formatMoney","import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, TooltipProps } from 'recharts';\nimport { Result } from '../../types/types';\nimport formatMoney from '../../services/FormatMoney'\n\ninterface Props {\n  data: Result,\n  initialDeposit: number\n}\n\nconst CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>): any => {\n  if (active && payload && payload.length) {\n    const inital = Number(payload[0].value)\n    const deposits = Number(payload[1].value)\n    const interest = Number(payload[2].value)\n\n    const total = inital + deposits + interest\n\n    return (\n      <div className=\"custom-tooltip\">\n        <dl className=\"row\">\n          <dt className=\"col-sm-12 g-0\">🚀 &nbsp; Year {label}</dt>\n        </dl>\n        <hr />\n        <dl className=\"row\">\n          <dt className=\"col-sm-6 g-0\">Initial</dt>\n          <dd className=\"col-sm-6 g-0\">{formatMoney(inital)}</dd>\n        </dl>\n        <dl className=\"row\">\n          <dt className=\"col-sm-6 g-0\">Deposits</dt>\n          <dd className=\"col-sm-6 g-0\">{formatMoney(deposits)}</dd>\n        </dl>\n        <dl className=\"row\">\n          <dt className=\"col-sm-6 g-0\">Interest</dt>\n          <dd className=\"col-sm-6 g-0\">{formatMoney(interest)}</dd>\n        </dl>\n        \n        <dl className=\"row\">\n          <dt className=\"col-sm-6 g-0\">Total</dt>\n          <dd className=\"col-sm-6 g-0\">\n            { formatMoney(total) }\n          </dd>\n        </dl>    \n      </div>\n    )\n  } else {\n    return (\n      <>Nothing to render</>\n    )\n  }\n}\n\nconst ResultChart: React.FC<Props> = ({data, initialDeposit}) => {\n\n  // Guard\n  if (data === undefined) return null\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"90%\">\n        <BarChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 20,\n            right: 0,\n            left: 0,\n            bottom: 20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"yearNumber\" />\n          <YAxis tickFormatter={(value) => formatMoney(value)} />\n          <Tooltip content={<CustomTooltip />}/>\n          <Legend verticalAlign=\"bottom\" height={36} />\n          <Bar name=\"Initial deposit\" dataKey=\"initialDeposit\" stackId=\"a\" fill=\"#1c4d78\" />\n          <Bar name=\"Regular deposits\" dataKey=\"cumulativeRegularDeposits\" stackId=\"a\" fill=\"#3c83c2\" />\n          <Bar name=\"Interest\" dataKey=\"cumulativeInterest\" stackId=\"a\" fill=\"#82ca9d\" />\n        </BarChart>\n      </ResponsiveContainer>\n  )\n}\n\nexport default ResultChart","import { Result } from '../../types/types';\nimport formatMoney from '../../services/FormatMoney'\n\ninterface Props {\n  data: Result,\n  initialDeposit: number\n}\n\nconst ResultsText: React.FC<Props> = ({data, initialDeposit}) => {\n\n  // Guard\n  if (data === undefined) return null\n\n  // Get last year result\n  const result = data[data.length - 1]\n\n  // Definitions\n  const initial = initialDeposit/100\n  const deposits = result.cumulativeRegularDeposits\n  const interest = result.cumulativeInterest\n  const total = result.cumulativeTotal\n\n  return (\n    <div className=\"resultsTest\">\n        <dl className=\"row\">\n          <dt className=\"col-6\">Initial deposit:</dt>\n          <dd className=\"col-6\">{formatMoney(initial)}</dd>\n        </dl>\n        <dl className=\"row\">\n          <dt className=\"col-6\">Regular deposits:</dt>\n          <dd className=\"col-6\">{formatMoney(deposits)}</dd>\n        </dl>\n        <dl className=\"row\">\n          <dt className=\"col-6\">Total interest:</dt>\n          <dd className=\"col-6\">{formatMoney(interest)}</dd>\n        </dl>\n        <dl className=\"row\">\n          <dt className=\"col-6\">Total savings:</dt>\n          <dd className=\"col-6\">\n            { formatMoney(total) }\n          </dd>\n        </dl>    \n      </div>\n  )\n}\n\nexport default ResultsText\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/style.css'\nimport Form from './components/calculator/Form'\nimport {Strategy, Result} from './types/types'\nimport {cleanMoney, cleanPercent, cleanYears} from './services/InputCleaners'\nimport { calculateCompoundInterest } from './services/CompoundInterest'\nimport ResultChart from './components/result/ResultChart'\nimport ResultsText from './components/result/ResultsText'\n\nconst defaultStrategy: Strategy = {\n  initialDeposit: 0, // in cents\n  regularDeposit: 2000, // in cents\n  depositFrequency: \"Annually\",\n  compoundFrequency: \"Annually\",\n  numberOfYears: 10,\n  annualInterestRate: 500\n}\n\nconst App = () => {\n  const [strategy, setStrategy] = useState<Strategy>(defaultStrategy)\n  const [result, setResult] = useState<Result>()\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    // Handles a submit event each time the user changes something in the form\n\n    const name = event.target.name // Form field name\n\n    // Cast frequency as string\n    let value: string | number\n    if (name === \"depositFrequency\" || name === \"compoundFrequency\")\n      value = event.target.value\n    else if (name === \"regularDeposit\" || name === \"initialDeposit\")\n      value = cleanMoney(event.target.value)\n    else if (name === \"annualInterestRate\")\n      value = cleanPercent(event.target.value)\n    else // Number of years\n      value = cleanYears(event.target.value)\n      \n\n    setStrategy({ // Update state based on form field name and its new value\n      ...strategy,\n      [name]: value\n    })\n   \n  }\n\n  useEffect(() => {\n    // Upon state change\n    // Perform the calculations\n    const result = calculateCompoundInterest(strategy)\n    // Refine the result for the chart\n\n    // Set the result state, to update the chart\n    setResult(result)\n    \n  }, [strategy])\n\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-12\">\n          <h1>Compound interest calculator</h1>\n          <p>\n            This <mark>compound interest</mark> calculator helps you work out:\n            <ul>\n              <li>the amount you should save</li>\n              <li>how compound interest will affect your savings</li>\n              <li>saving now is better than saving later</li>\n              <li>how to calculate compound interest</li>\n            </ul>\n            </p>\n        </div>\n      </div>\n      <hr />\n      <div className=\"row justify-content-center\">\n        <div className=\"col-12\">\n            <h2>Your strategy</h2>\n            <Form handleSubmit={handleSubmit} strategy={strategy} />\n          \n        </div>\n      </div>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-12\">\n            <h2>Results</h2>\n            {(strategy.numberOfYears > 0) ? <ResultChart data={result} initialDeposit={strategy.initialDeposit} /> : \"\" }\n        </div>\n      </div>\n\n      <div className=\"row justify-content-center\">\n        <div className=\"col-12\">\n            <h3>Your strategy</h3>\n            {(strategy.numberOfYears > 0) ? <ResultsText data={result} initialDeposit={strategy.initialDeposit} /> : \"\" }\n        </div>\n      </div>\n      <hr />\n      <div className=\"row justify-content-center\">\n        <div className=\"col-12\">\n            <h2>About</h2>\n            <p>\n              This is a compound interest calculator inspired <a href=\"https://moneysmart.gov.au/budgeting/compound-interest-calculator\" target=\"0\">a similar Javascript app</a> made for the Australian Government's Money Smart website. It is made with ReactJS, Typescript, and Bootstrap CSS.\n            </p>\n            \n            <div className=\"row\" id=\"footer\">\n              <div className=\"col-6\">\n                <a className=\"btn btn-success\" href=\"https://github.com/lkdm/react-compound-interest-calculator\" role=\"button\" target=\"0\">👀 &nbsp; View the sourcecode &nbsp;👀</a>\n              </div>\n              <div className=\"col-6\">\n                <a className=\"btn btn-warning\" href=\"https://github.com/lkdm\" role=\"button\" target=\"0\">🧞 &nbsp; Meet the developer &nbsp;🧞</a>\n              </div>\n            </div>\n            \n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import { store } from './app/store';\n// import { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}